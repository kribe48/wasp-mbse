/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TurtleBotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TurtleBot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurtleBotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAreaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAreaAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAreaAreaParserRuleCall_3_1_0 = (RuleCall)cAreaAssignment_3_1.eContents().get(0);
		private final Keyword cWaypointTypesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cWaypointtypesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cWaypointtypesWaypointTypeParserRuleCall_6_0 = (RuleCall)cWaypointtypesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cWaypointtypesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cWaypointtypesWaypointTypeParserRuleCall_7_1_0 = (RuleCall)cWaypointtypesAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cWaypointsKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cWaypointsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cWaypointsWayPointParserRuleCall_11_0 = (RuleCall)cWaypointsAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cWaypointsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cWaypointsWayPointParserRuleCall_12_1_0 = (RuleCall)cWaypointsAssignment_12_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cBotStartsAtKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cBot_startAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final CrossReference cBot_startWayPointCrossReference_15_0 = (CrossReference)cBot_startAssignment_15.eContents().get(0);
		private final RuleCall cBot_startWayPointEStringParserRuleCall_15_0_1 = (RuleCall)cBot_startWayPointCrossReference_15_0.eContents().get(1);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cMissionsKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Assignment cMissionsAssignment_16_2 = (Assignment)cGroup_16.eContents().get(2);
		private final RuleCall cMissionsMissionParserRuleCall_16_2_0 = (RuleCall)cMissionsAssignment_16_2.eContents().get(0);
		private final Group cGroup_16_3 = (Group)cGroup_16.eContents().get(3);
		private final Keyword cCommaKeyword_16_3_0 = (Keyword)cGroup_16_3.eContents().get(0);
		private final Assignment cMissionsAssignment_16_3_1 = (Assignment)cGroup_16_3.eContents().get(1);
		private final RuleCall cMissionsMissionParserRuleCall_16_3_1_0 = (RuleCall)cMissionsAssignment_16_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_16_4 = (Keyword)cGroup_16.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//TurtleBot:
		//	'TurtleBot'
		//	name=EString
		//	'{' ('area =' area=Area)?
		//	'waypoint types =' '{' waypointtypes+=WaypointType ("," waypointtypes+=WaypointType)* '}'
		//	'waypoints =' '{' waypoints+=WayPoint ("," waypoints+=WayPoint)* '}'
		//	'bot starts at =' bot_start=[WayPoint|EString] ('missions =' '{' missions+=Mission ("," missions+=Mission)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'TurtleBot' name=EString '{' ('area =' area=Area)? 'waypoint types =' '{' waypointtypes+=WaypointType (","
		//waypointtypes+=WaypointType)* '}' 'waypoints =' '{' waypoints+=WayPoint ("," waypoints+=WayPoint)* '}'
		//'bot starts at =' bot_start=[WayPoint|EString] ('missions =' '{' missions+=Mission ("," missions+=Mission)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//'TurtleBot'
		public Keyword getTurtleBotKeyword_0() { return cTurtleBotKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('area =' area=Area)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'area ='
		public Keyword getAreaKeyword_3_0() { return cAreaKeyword_3_0; }
		
		//area=Area
		public Assignment getAreaAssignment_3_1() { return cAreaAssignment_3_1; }
		
		//Area
		public RuleCall getAreaAreaParserRuleCall_3_1_0() { return cAreaAreaParserRuleCall_3_1_0; }
		
		//'waypoint types ='
		public Keyword getWaypointTypesKeyword_4() { return cWaypointTypesKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//waypointtypes+=WaypointType
		public Assignment getWaypointtypesAssignment_6() { return cWaypointtypesAssignment_6; }
		
		//WaypointType
		public RuleCall getWaypointtypesWaypointTypeParserRuleCall_6_0() { return cWaypointtypesWaypointTypeParserRuleCall_6_0; }
		
		//("," waypointtypes+=WaypointType)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//waypointtypes+=WaypointType
		public Assignment getWaypointtypesAssignment_7_1() { return cWaypointtypesAssignment_7_1; }
		
		//WaypointType
		public RuleCall getWaypointtypesWaypointTypeParserRuleCall_7_1_0() { return cWaypointtypesWaypointTypeParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'waypoints ='
		public Keyword getWaypointsKeyword_9() { return cWaypointsKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//waypoints+=WayPoint
		public Assignment getWaypointsAssignment_11() { return cWaypointsAssignment_11; }
		
		//WayPoint
		public RuleCall getWaypointsWayPointParserRuleCall_11_0() { return cWaypointsWayPointParserRuleCall_11_0; }
		
		//("," waypoints+=WayPoint)*
		public Group getGroup_12() { return cGroup_12; }
		
		//","
		public Keyword getCommaKeyword_12_0() { return cCommaKeyword_12_0; }
		
		//waypoints+=WayPoint
		public Assignment getWaypointsAssignment_12_1() { return cWaypointsAssignment_12_1; }
		
		//WayPoint
		public RuleCall getWaypointsWayPointParserRuleCall_12_1_0() { return cWaypointsWayPointParserRuleCall_12_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
		
		//'bot starts at ='
		public Keyword getBotStartsAtKeyword_14() { return cBotStartsAtKeyword_14; }
		
		//bot_start=[WayPoint|EString]
		public Assignment getBot_startAssignment_15() { return cBot_startAssignment_15; }
		
		//[WayPoint|EString]
		public CrossReference getBot_startWayPointCrossReference_15_0() { return cBot_startWayPointCrossReference_15_0; }
		
		//EString
		public RuleCall getBot_startWayPointEStringParserRuleCall_15_0_1() { return cBot_startWayPointEStringParserRuleCall_15_0_1; }
		
		//('missions =' '{' missions+=Mission ("," missions+=Mission)* '}')?
		public Group getGroup_16() { return cGroup_16; }
		
		//'missions ='
		public Keyword getMissionsKeyword_16_0() { return cMissionsKeyword_16_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_16_1() { return cLeftCurlyBracketKeyword_16_1; }
		
		//missions+=Mission
		public Assignment getMissionsAssignment_16_2() { return cMissionsAssignment_16_2; }
		
		//Mission
		public RuleCall getMissionsMissionParserRuleCall_16_2_0() { return cMissionsMissionParserRuleCall_16_2_0; }
		
		//("," missions+=Mission)*
		public Group getGroup_16_3() { return cGroup_16_3; }
		
		//","
		public Keyword getCommaKeyword_16_3_0() { return cCommaKeyword_16_3_0; }
		
		//missions+=Mission
		public Assignment getMissionsAssignment_16_3_1() { return cMissionsAssignment_16_3_1; }
		
		//Mission
		public RuleCall getMissionsMissionParserRuleCall_16_3_1_0() { return cMissionsMissionParserRuleCall_16_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_16_4() { return cRightCurlyBracketKeyword_16_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Task");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLineTaskParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cShortestPathTaskParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReturnToStartTaskParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Task:
		//	LineTask | ShortestPathTask | ReturnToStartTask;
		@Override public ParserRule getRule() { return rule; }
		
		//LineTask | ShortestPathTask | ReturnToStartTask
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LineTask
		public RuleCall getLineTaskParserRuleCall_0() { return cLineTaskParserRuleCall_0; }
		
		//ShortestPathTask
		public RuleCall getShortestPathTaskParserRuleCall_1() { return cShortestPathTaskParserRuleCall_1; }
		
		//ReturnToStartTask
		public RuleCall getReturnToStartTaskParserRuleCall_2() { return cReturnToStartTaskParserRuleCall_2; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class AreaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Area");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAreaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMaxXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXmaxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXmaxEIntParserRuleCall_3_0 = (RuleCall)cXmaxAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cMaxYKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cYmaxAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cYmaxEIntParserRuleCall_6_0 = (RuleCall)cYmaxAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Area:
		//	{Area}
		//	'('
		//	'max x =' xmax=EInt ',' 'max y =' ymax=EInt
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Area} '(' 'max x =' xmax=EInt ',' 'max y =' ymax=EInt ')'
		public Group getGroup() { return cGroup; }
		
		//{Area}
		public Action getAreaAction_0() { return cAreaAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'max x ='
		public Keyword getMaxXKeyword_2() { return cMaxXKeyword_2; }
		
		//xmax=EInt
		public Assignment getXmaxAssignment_3() { return cXmaxAssignment_3; }
		
		//EInt
		public RuleCall getXmaxEIntParserRuleCall_3_0() { return cXmaxEIntParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'max y ='
		public Keyword getMaxYKeyword_5() { return cMaxYKeyword_5; }
		
		//ymax=EInt
		public Assignment getYmaxAssignment_6() { return cYmaxAssignment_6; }
		
		//EInt
		public RuleCall getYmaxEIntParserRuleCall_6_0() { return cYmaxEIntParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class WaypointTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WaypointType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWaypointTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//WaypointType:
		//	{WaypointType} name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{WaypointType} name=EString
		public Group getGroup() { return cGroup; }
		
		//{WaypointType}
		public Action getWaypointTypeAction_0() { return cWaypointTypeAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class WayPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WayPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWayPointAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cWaypointtypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cWaypointtypesWaypointTypeCrossReference_1_0 = (CrossReference)cWaypointtypesAssignment_1.eContents().get(0);
		private final RuleCall cWaypointtypesWaypointTypeEStringParserRuleCall_1_0_1 = (RuleCall)cWaypointtypesWaypointTypeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAmpersandKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWaypointtypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cWaypointtypesWaypointTypeCrossReference_2_1_0 = (CrossReference)cWaypointtypesAssignment_2_1.eContents().get(0);
		private final RuleCall cWaypointtypesWaypointTypeEStringParserRuleCall_2_1_0_1 = (RuleCall)cWaypointtypesWaypointTypeCrossReference_2_1_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cXKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCoord_xAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCoord_xEIntParserRuleCall_6_0 = (RuleCall)cCoord_xAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cYKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cCoord_yAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCoord_yEIntParserRuleCall_9_0 = (RuleCall)cCoord_yAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//WayPoint:
		//	{WayPoint} waypointtypes+=[WaypointType|EString] ("&" waypointtypes+=[WaypointType|EString])*
		//	name=EString
		//	'('
		//	'x=' coord_x=EInt ',' 'y=' coord_y=EInt
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{WayPoint} waypointtypes+=[WaypointType|EString] ("&" waypointtypes+=[WaypointType|EString])* name=EString '(' 'x='
		//coord_x=EInt ',' 'y=' coord_y=EInt ')'
		public Group getGroup() { return cGroup; }
		
		//{WayPoint}
		public Action getWayPointAction_0() { return cWayPointAction_0; }
		
		//waypointtypes+=[WaypointType|EString]
		public Assignment getWaypointtypesAssignment_1() { return cWaypointtypesAssignment_1; }
		
		//[WaypointType|EString]
		public CrossReference getWaypointtypesWaypointTypeCrossReference_1_0() { return cWaypointtypesWaypointTypeCrossReference_1_0; }
		
		//EString
		public RuleCall getWaypointtypesWaypointTypeEStringParserRuleCall_1_0_1() { return cWaypointtypesWaypointTypeEStringParserRuleCall_1_0_1; }
		
		//("&" waypointtypes+=[WaypointType|EString])*
		public Group getGroup_2() { return cGroup_2; }
		
		//"&"
		public Keyword getAmpersandKeyword_2_0() { return cAmpersandKeyword_2_0; }
		
		//waypointtypes+=[WaypointType|EString]
		public Assignment getWaypointtypesAssignment_2_1() { return cWaypointtypesAssignment_2_1; }
		
		//[WaypointType|EString]
		public CrossReference getWaypointtypesWaypointTypeCrossReference_2_1_0() { return cWaypointtypesWaypointTypeCrossReference_2_1_0; }
		
		//EString
		public RuleCall getWaypointtypesWaypointTypeEStringParserRuleCall_2_1_0_1() { return cWaypointtypesWaypointTypeEStringParserRuleCall_2_1_0_1; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//'x='
		public Keyword getXKeyword_5() { return cXKeyword_5; }
		
		//coord_x=EInt
		public Assignment getCoord_xAssignment_6() { return cCoord_xAssignment_6; }
		
		//EInt
		public RuleCall getCoord_xEIntParserRuleCall_6_0() { return cCoord_xEIntParserRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//'y='
		public Keyword getYKeyword_8() { return cYKeyword_8; }
		
		//coord_y=EInt
		public Assignment getCoord_yAssignment_9() { return cCoord_yAssignment_9; }
		
		//EInt
		public RuleCall getCoord_yEIntParserRuleCall_9_0() { return cCoord_yEIntParserRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}
	public class MissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Mission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMissionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTaskAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTaskTaskParserRuleCall_3_0 = (RuleCall)cTaskAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTaskAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTaskTaskParserRuleCall_4_1_0 = (RuleCall)cTaskAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Mission:
		//	{Mission} name=EString
		//	'{'
		//	task+=Task ("," task+=Task)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mission} name=EString '{' task+=Task ("," task+=Task)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Mission}
		public Action getMissionAction_0() { return cMissionAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//task+=Task
		public Assignment getTaskAssignment_3() { return cTaskAssignment_3; }
		
		//Task
		public RuleCall getTaskTaskParserRuleCall_3_0() { return cTaskTaskParserRuleCall_3_0; }
		
		//("," task+=Task)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//task+=Task
		public Assignment getTaskAssignment_4_1() { return cTaskAssignment_4_1; }
		
		//Task
		public RuleCall getTaskTaskParserRuleCall_4_1_0() { return cTaskTaskParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class LineTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LineTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWaypointsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cWaypointsWayPointCrossReference_2_0 = (CrossReference)cWaypointsAssignment_2.eContents().get(0);
		private final RuleCall cWaypointsWayPointEStringParserRuleCall_2_0_1 = (RuleCall)cWaypointsWayPointCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWaypointsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cWaypointsWayPointCrossReference_3_1_0 = (CrossReference)cWaypointsAssignment_3_1.eContents().get(0);
		private final RuleCall cWaypointsWayPointEStringParserRuleCall_3_1_0_1 = (RuleCall)cWaypointsWayPointCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LineTask:
		//	'line'
		//	'('
		//	waypoints+=[WayPoint|EString] ("," waypoints+=[WayPoint|EString])*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'line' '(' waypoints+=[WayPoint|EString] ("," waypoints+=[WayPoint|EString])* ')'
		public Group getGroup() { return cGroup; }
		
		//'line'
		public Keyword getLineKeyword_0() { return cLineKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//waypoints+=[WayPoint|EString]
		public Assignment getWaypointsAssignment_2() { return cWaypointsAssignment_2; }
		
		//[WayPoint|EString]
		public CrossReference getWaypointsWayPointCrossReference_2_0() { return cWaypointsWayPointCrossReference_2_0; }
		
		//EString
		public RuleCall getWaypointsWayPointEStringParserRuleCall_2_0_1() { return cWaypointsWayPointEStringParserRuleCall_2_0_1; }
		
		//("," waypoints+=[WayPoint|EString])*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//waypoints+=[WayPoint|EString]
		public Assignment getWaypointsAssignment_3_1() { return cWaypointsAssignment_3_1; }
		
		//[WayPoint|EString]
		public CrossReference getWaypointsWayPointCrossReference_3_1_0() { return cWaypointsWayPointCrossReference_3_1_0; }
		
		//EString
		public RuleCall getWaypointsWayPointEStringParserRuleCall_3_1_0_1() { return cWaypointsWayPointEStringParserRuleCall_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ShortestPathTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ShortestPathTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShortestPathKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWaypointsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cWaypointsWayPointCrossReference_2_0 = (CrossReference)cWaypointsAssignment_2.eContents().get(0);
		private final RuleCall cWaypointsWayPointEStringParserRuleCall_2_0_1 = (RuleCall)cWaypointsWayPointCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWaypointsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cWaypointsWayPointCrossReference_3_1_0 = (CrossReference)cWaypointsAssignment_3_1.eContents().get(0);
		private final RuleCall cWaypointsWayPointEStringParserRuleCall_3_1_0_1 = (RuleCall)cWaypointsWayPointCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ShortestPathTask:
		//	'shortest path'
		//	'('
		//	waypoints+=[WayPoint|EString] ("," waypoints+=[WayPoint|EString])*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'shortest path' '(' waypoints+=[WayPoint|EString] ("," waypoints+=[WayPoint|EString])* ')'
		public Group getGroup() { return cGroup; }
		
		//'shortest path'
		public Keyword getShortestPathKeyword_0() { return cShortestPathKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//waypoints+=[WayPoint|EString]
		public Assignment getWaypointsAssignment_2() { return cWaypointsAssignment_2; }
		
		//[WayPoint|EString]
		public CrossReference getWaypointsWayPointCrossReference_2_0() { return cWaypointsWayPointCrossReference_2_0; }
		
		//EString
		public RuleCall getWaypointsWayPointEStringParserRuleCall_2_0_1() { return cWaypointsWayPointEStringParserRuleCall_2_0_1; }
		
		//("," waypoints+=[WayPoint|EString])*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//waypoints+=[WayPoint|EString]
		public Assignment getWaypointsAssignment_3_1() { return cWaypointsAssignment_3_1; }
		
		//[WayPoint|EString]
		public CrossReference getWaypointsWayPointCrossReference_3_1_0() { return cWaypointsWayPointCrossReference_3_1_0; }
		
		//EString
		public RuleCall getWaypointsWayPointEStringParserRuleCall_3_1_0_1() { return cWaypointsWayPointEStringParserRuleCall_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ReturnToStartTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReturnToStartTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnToStartTaskAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnToStartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ReturnToStartTask:
		//	{ReturnToStartTask}
		//	'return to start';
		@Override public ParserRule getRule() { return rule; }
		
		//{ReturnToStartTask} 'return to start'
		public Group getGroup() { return cGroup; }
		
		//{ReturnToStartTask}
		public Action getReturnToStartTaskAction_0() { return cReturnToStartTaskAction_0; }
		
		//'return to start'
		public Keyword getReturnToStartKeyword_1() { return cReturnToStartKeyword_1; }
	}
	
	
	private final TurtleBotElements pTurtleBot;
	private final TaskElements pTask;
	private final EStringElements pEString;
	private final AreaElements pArea;
	private final WaypointTypeElements pWaypointType;
	private final WayPointElements pWayPoint;
	private final MissionElements pMission;
	private final EIntElements pEInt;
	private final LineTaskElements pLineTask;
	private final ShortestPathTaskElements pShortestPathTask;
	private final ReturnToStartTaskElements pReturnToStartTask;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTurtleBot = new TurtleBotElements();
		this.pTask = new TaskElements();
		this.pEString = new EStringElements();
		this.pArea = new AreaElements();
		this.pWaypointType = new WaypointTypeElements();
		this.pWayPoint = new WayPointElements();
		this.pMission = new MissionElements();
		this.pEInt = new EIntElements();
		this.pLineTask = new LineTaskElements();
		this.pShortestPathTask = new ShortestPathTaskElements();
		this.pReturnToStartTask = new ReturnToStartTaskElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TurtleBot:
	//	'TurtleBot'
	//	name=EString
	//	'{' ('area =' area=Area)?
	//	'waypoint types =' '{' waypointtypes+=WaypointType ("," waypointtypes+=WaypointType)* '}'
	//	'waypoints =' '{' waypoints+=WayPoint ("," waypoints+=WayPoint)* '}'
	//	'bot starts at =' bot_start=[WayPoint|EString] ('missions =' '{' missions+=Mission ("," missions+=Mission)* '}')?
	//	'}';
	public TurtleBotElements getTurtleBotAccess() {
		return pTurtleBot;
	}
	
	public ParserRule getTurtleBotRule() {
		return getTurtleBotAccess().getRule();
	}
	
	//Task:
	//	LineTask | ShortestPathTask | ReturnToStartTask;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Area:
	//	{Area}
	//	'('
	//	'max x =' xmax=EInt ',' 'max y =' ymax=EInt
	//	')';
	public AreaElements getAreaAccess() {
		return pArea;
	}
	
	public ParserRule getAreaRule() {
		return getAreaAccess().getRule();
	}
	
	//WaypointType:
	//	{WaypointType} name=EString;
	public WaypointTypeElements getWaypointTypeAccess() {
		return pWaypointType;
	}
	
	public ParserRule getWaypointTypeRule() {
		return getWaypointTypeAccess().getRule();
	}
	
	//WayPoint:
	//	{WayPoint} waypointtypes+=[WaypointType|EString] ("&" waypointtypes+=[WaypointType|EString])*
	//	name=EString
	//	'('
	//	'x=' coord_x=EInt ',' 'y=' coord_y=EInt
	//	')';
	public WayPointElements getWayPointAccess() {
		return pWayPoint;
	}
	
	public ParserRule getWayPointRule() {
		return getWayPointAccess().getRule();
	}
	
	//Mission:
	//	{Mission} name=EString
	//	'{'
	//	task+=Task ("," task+=Task)*
	//	'}';
	public MissionElements getMissionAccess() {
		return pMission;
	}
	
	public ParserRule getMissionRule() {
		return getMissionAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//LineTask:
	//	'line'
	//	'('
	//	waypoints+=[WayPoint|EString] ("," waypoints+=[WayPoint|EString])*
	//	')';
	public LineTaskElements getLineTaskAccess() {
		return pLineTask;
	}
	
	public ParserRule getLineTaskRule() {
		return getLineTaskAccess().getRule();
	}
	
	//ShortestPathTask:
	//	'shortest path'
	//	'('
	//	waypoints+=[WayPoint|EString] ("," waypoints+=[WayPoint|EString])*
	//	')';
	public ShortestPathTaskElements getShortestPathTaskAccess() {
		return pShortestPathTask;
	}
	
	public ParserRule getShortestPathTaskRule() {
		return getShortestPathTaskAccess().getRule();
	}
	
	//ReturnToStartTask:
	//	{ReturnToStartTask}
	//	'return to start';
	public ReturnToStartTaskElements getReturnToStartTaskAccess() {
		return pReturnToStartTask;
	}
	
	public ParserRule getReturnToStartTaskRule() {
		return getReturnToStartTaskAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
